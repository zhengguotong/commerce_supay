<?php
/**
 * @file
 * @author Guotong Zheng (Tony)
 * @website http://visionsoft.com.au
 * Implements Royal Pay payment services for use with Drupal Commerce
 */
define('SUPAY_API_GATEWAY','http://www.supayedu.com/payment/bridge/merchant_request');

/*
 * Implements hook_menu().
 */
// function commerce_supay_menu() {
//     // Add a menu callback for Alipay's notification on operation processing.
//     $items['commerce_alipay_global/notify'] = array(
//         'page callback' => 'commerce_royalpay_process_notify',
//         'access callback' => TRUE,
//         'type' => MENU_CALLBACK,
//     );

//     return $items;
// }

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_supay_commerce_payment_method_info() {
    $payment_methods = array();

    // Declare Supay payment method to redirect to external site.
    $payment_methods['supay'] = array(
        'base' => 'commerce_supay',
        'title' => t('Supay'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_supay_settings_form($settings = NULL) {
    $form = array();
 
    $form['merchant_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant Id'),
        '#description' => t("Merchant Id  provided by Supay Tech"),
        '#default_value' => isset($settings['merchant_id']) ?$settings['merchant_id'] : '',
        '#required' => TRUE,
    );
    
    $form['authentication_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Authentication Code'),
        '#description' => t("Authentication Code provided by by Supay Tech"),
        '#default_value' => isset($settings['authentication_code'])?$settings['authentication_code'] : '' ,
        '#required' => TRUE,
    );

    // Enable debug mode.
    $form['debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode <strong>(for development use only)</strong>'),
        '#description' => t('<strong>Override all transactions to a total of 0.01 </strong> for testing the configuration and making sure that payments can be received on the correct account.<br/>This setting should only be used for development purposes.'),
        '#default_value' => isset($settings['debug']) ? $settings['debug'] : '',
    );

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the payment method selection pane on Checkout to add supay icons.
 */
function commerce_supay_form_commerce_checkout_form_alter(&$form, &$form_state)
{
    // If this checkout form contains the payment method radios...
    if (!empty($form['commerce_payment']['payment_method']['#options'])) {
        // Loop over its options array looking for a Alipay option.
        foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
            list($method_id, $rule_name) = explode('|', $key);

            // If we find Alipay...
            if ($method_id == 'supay') {
                // Prepare the replacement radio button text with icons.
                $icons_path = drupal_get_path('module', 'commerce_supay') . '/images/';

                // Generate Alipay logo image markup.
                $supay_label = t('Supay');
                $supay_icon = theme('image', array(
                    'path' => $icons_path . 'supay.png',
                    'title' => $supay_label,
                    'alt' => $supay_label,
                    'attributes' => array('class' => 'commerce-supay-icon'),
                ));
               
                // Generate the aggregated markup.
                $value = $supay_icon ;

                break;
            }
        }
    }
}

 /**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_supay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form['supay_information'] = array(
        '#markup' => '<span class="commerce-supay-info">' . t('(Continue with checkout to complete payment via Supay.)') . '</span>',
    );

    return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * Prepares the necessary data to be passed to Alipay with the redirection.
 */
function commerce_supay_redirect_form($form, &$form_state, $order, $payment_method) {
    // Return an error if the enabled action's settings haven't been configured.
    if (empty($payment_method['settings']['merchant_id'])) {
        drupal_set_message(t('supay is not configured for use. No merchat ID has been specified.'), 'error');
        return array();
    }
    $form = array();
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();

    // Override transaction amount if debug mode is enabled.
    $amount = $payment_method['settings']['debug'] ? 1 : $wrapper->commerce_order_total->amount->value();
    //$amount = commerce_currency_amount_to_decimal($amount, $currency_code);

    // // Set feedback URLs.
    // $settings = array(
    //     // Return to the payment redirect page for processing successful payments.
    //     'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    //     //'notify_url' => url('commerce_alipay_global/notify', array('absolute' => TRUE)),
    // );
    $merchant_trade_no = commerce_supay_get_order_id($order->order_number);

    $data = array(
        'merchant_id' => $payment_method['settings']['merchant_id'],
        'authentication_code' => $payment_method['settings']['authentication_code'],
        'merchant_trade_no' => $merchant_trade_no,
        'total_amount' => $amount,
    );
    $token = md5(drupal_http_build_query( $data));
    
    $data += array(
        'create_time' =>gmdate('Y-m-d H-i:s'),
        'currency' => $currency_code,
        'notification_url' => url('commerce_alipay_global/notify', array('absolute' => TRUE)),
    )
    ;
    // $input = new RoyalPayUnifiedOrder();
    // $input->setPartnerInfo($payment_method['settings']['partner_code'],$payment_method['settings']['credential_code']);

    // $input->setOrderId(commerce_royalpay_get_order_id($order->order_number));
    // $input->setDescription( ' order:' . $order->order_number);
    // $input->setPrice($amount);
    // $input->setCurrency($currency_code);
    // // $input->setNotifyUrl('');
    // $input->setOperator("123456");

    // $result = RoyalPayApi::qrOrder($input);

    // $inputObj = new RoyalPayRedirect();
    // $inputObj->setPartnerInfo($payment_method['settings']['partner_code'],$payment_method['settings']['credential_code']);
    // $inputObj->setRedirect($settings['return']);

    // $form['pay_url'] = array('#type' => 'hidden',
    //                              '#value' => RoyalPayApi::getQRRedirectUrl($result['pay_url'], $inputObj));
    // $form['submit'] = array(
    //     '#type' => 'submit',
    //     '#value' => t('Proceed with royalpay'),
    //     '#submit' => array('commerce_royalpay_redirect'),
    // );
    
    return $form;
}

function commerce_supay_get_order_id($order_id){
    return str_pad($order_id,10,'0',STR_PAD_LEFT) . date('dmYhis');
}

function commerce_supay_get_dc_order_id($order_id){
    return (int) substr($order_id, 0, 10);
}

